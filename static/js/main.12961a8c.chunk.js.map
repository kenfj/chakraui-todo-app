{"version":3,"sources":["components/AddTodo.tsx","components/TodoList.tsx","hooks/useTodo.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AddTodo","addTodo","contentRef","useRef","toast","useToast","onSubmit","e","preventDefault","current","value","todo","id","nanoid","body","title","status","duration","isClosable","m","variant","placeholder","ref","type","colorScheme","px","TodoList","todos","deleteTodo","length","p","borderRadius","vStackProps","w","maxW","base","sm","lg","xl","borderColor","borderWidth","alignItems","divider","buttonProps","icon","isRound","map","onClick","useTodo","useState","JSON","parse","localStorage","getItem","setTodos","useEffect","setItem","stringify","filter","App","useColorMode","colorMode","toggleColorMode","size","alignSelf","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","initialColorMode","document","getElementById"],"mappings":"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","file":"static/js/main.12961a8c.chunk.js","sourcesContent":["import { Button, HStack, Input, useToast } from '@chakra-ui/react'\nimport { nanoid } from 'nanoid'\nimport React, { FormEvent, useRef } from 'react'\nimport { Todo } from '../hooks/useTodo'\n\ntype Props = {\n  addTodo: (todo: Todo) => void\n}\n\nfunction AddTodo({ addTodo }: Props) {\n  const contentRef = useRef<HTMLInputElement>(null)\n\n  // https://chakra-ui.com/docs/feedback/toast\n  const toast = useToast()\n\n  const toastError = (title: string) => toast({\n    title: title,\n    status: 'error',\n    duration: 2000,\n    isClosable: true,\n  })\n\n  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n\n    if (contentRef.current === null)\n      return\n\n    if (!contentRef.current.value) {\n      toastError('No content')\n      return\n    }\n\n    const todo: Todo = {\n      id: nanoid(),\n      body: contentRef.current.value\n    }\n\n    addTodo(todo)\n    contentRef.current.value = ''\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <HStack m='8'>\n        <Input variant='filled' placeholder='learning Chakra UI' ref={contentRef} />\n        <Button type='submit' colorScheme='green' px='8'>Add Todo</Button>\n      </HStack>\n    </form>\n  )\n}\n\nexport default AddTodo\n","import { Badge, HStack, IconButton, Spacer, StackDivider, Text, VStack } from '@chakra-ui/react'\nimport React from 'react'\nimport { FaTrash } from 'react-icons/fa'\nimport { Todo } from '../hooks/useTodo'\n\ntype Props = {\n  todos: Todo[]\n  deleteTodo: (id: string) => void\n}\n\nfunction TodoList({ todos, deleteTodo }: Props) {\n  if (todos.length === 0)\n    return (\n      <Badge colorScheme='green' p='4' m='4' borderRadius='lg'>\n        No Todos, yay!!!\n      </Badge>\n    )\n\n  const vStackProps = {\n    p: '4',\n    w: '100%',\n    maxW: { base: '90vw', sm: '80vw', lg: '50vw', xl: '40vw' },\n    borderColor: 'gray.100',\n    borderWidth: '2px',\n    borderRadius: 'lg',\n    alignItems: 'stretch',\n    divider: <StackDivider />\n  }\n\n  const buttonProps = {\n    icon: <FaTrash />,\n    isRound: true,\n    'aria-label': 'delete',\n  }\n\n  return (\n    <VStack {...vStackProps}>\n      {todos.map(todo => (\n        <HStack key={todo.id}>\n          <Text>{todo.body}</Text>\n          <Spacer />\n          <IconButton onClick={() => deleteTodo(todo.id)} {...buttonProps} />\n        </HStack>\n      ))}\n    </VStack>\n  )\n}\n\nexport default TodoList\n","import { useEffect, useState } from 'react'\n\n// const initialTodos = [\n//   { id: '1', body: 'get bread' },\n//   { id: '2', body: 'get butter' },\n// ]\n\nexport type Todo = { id: string, body: string }\n\nfunction useTodo() {\n  const [todos, setTodos] = useState<Todo[]>(\n    // use callback to run this only the first time\n    () => JSON.parse(localStorage.getItem('todos') || \"[]\")\n  )\n\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos))\n  }, [todos])\n\n  const addTodo = (todo: Todo) => {\n    setTodos([...todos, todo])\n  }\n\n  const deleteTodo = (id: string) => {\n    setTodos(todos.filter(todo => todo.id !== id))\n  }\n\n  return [todos, addTodo, deleteTodo] as const\n}\n\nexport default useTodo\n","import { IconButton } from '@chakra-ui/button';\nimport { Heading, useColorMode, VStack } from '@chakra-ui/react';\nimport React from 'react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\nimport AddTodo from './components/AddTodo';\nimport TodoList from './components/TodoList';\nimport useTodo from './hooks/useTodo';\n\nfunction App() {\n  const [todos, addTodo, deleteTodo] = useTodo()\n  const { colorMode, toggleColorMode } = useColorMode()\n\n  const buttonProps = {\n    size: 'lg',\n    isRound: true,\n    alignSelf: 'flex-end',\n    icon: colorMode === 'light' ? <FaMoon /> : <FaSun />,\n    'aria-label': 'Switch DarkMode',\n  }\n\n  return (\n    <VStack p={4}>\n      <IconButton onClick={toggleColorMode} {...buttonProps} />\n      {/* <Heading mb='8' fontWeight='extrabold' size='2xl' bgGradient='linear(to-r, pink.500, pink.300, blue.500)' bgClip='text'>Todo App</Heading> */}\n      <Heading size='2xl'>Chakra UI Todo App</Heading>\n      <AddTodo addTodo={addTodo} />\n      <TodoList todos={todos} deleteTodo={deleteTodo} />\n    </VStack>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ChakraProvider, ColorModeScript } from '@chakra-ui/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <ColorModeScript initialColorMode=\"light\" />\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}